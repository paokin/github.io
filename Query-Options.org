| *Option* | *Description* |
|----+-------+-------+----|
| =$filter= |Standard option from the OData Protocol. Allows filtering a collection of resources that are addressed by a request URL. The response is based on an integer, string, datetime conditions. The expression specified with $filter is evaluated for each resource in the collection, and only items where the expression evaluates to true are included in the response. (See examples in a separate page; Also refer to the description of each entity to check which parameters can be used to build filters)|
| =$includeMarkets= |This option is supported only for queries to the /events endpoint. It acts as an additional filtering option, applied to the set of markets associated with the events matched by the main =$filter= expression. Respectively, the =$includeMarkets= options support the exact same operators as the general `$filter` option.|
| =$orderby= |Standard option from the OData Protocol. Allows requesting resources in either ascending or descending order ( =asc= or =desc=, respectively). If =asc= or =desc= is not specified, then the resources will be ordered in ascending order. Example: =Events?$filter=(isLive eq false) and sportId eq '6'&$orderby=totalBets desc&top=10= (Will return the top 10 events with the highest count of bets placed, belonging to the sport with ID "6" (Tennis).) |
| =$top= | Standard option from the OData Protocol. Allows requesting a specific number of top results to be included in the result. Example: =Leagues?$filter=sportId eq "1"&$top=4= |
| =$skip= | Standard option from the OData Protocol. Allows requesting a number of items to be skipped and not included in the result. Example: =Leagues?$filter=sportId eq "1"&orderby=name&$skip=10$top=10= (Will order the response alphabetically, according to the localised league name value, and then will return the items which are from 11th to 20th position in the list. Combining $skip and $top options is a suitable way to create pagination for presenting a potentially long list of response items in an organised and usable way.)|
| =lambda= |Standard option from the OData Protocol. Allows support for All and Any. It is used along with $filter option. It enables filtering elements of the same type in a nested array. Example: Markets?$filter=Tags/any(s: s eq 'Default')|
| =$timeRange= |This is a custom option, not part of the standard OData protocol. It allows limiting the response by specifying a time range for the start time of the affected events. For the events and markets collections, this is straightforward and acts as a filter based on the startDate or startEventDate properties. For leagues, regions and sports it will return only items which are referred by events with start date within the specified range. This option supports the following values: =OneHour=, =TwoHours=, =ThreeHours=, =SixHours=, =TwelveHours=, =OneDay=, =TwoDays=, =SevenDays=. We have this custom option (and make the start date parameters non-queriable) in order to limit the number of possible collections defined by time range and improve the overall performance of the API. Example: =Leagues?$filter=sportId eq "1"&$timeRange=TwoDays= (Will return all leagues from the sport with ID "1" (Soccer) which have events starting within a range of two days from now. Note that this range is dynamic and the query will update, dropping some events from the response and adding others, as the time passes.) |
| =$from= |This is a custom option, not part of the standard OData protocol. It allows limiting the response by specifying the minimum start date of the events. For the events and markets collections, this is straightforward and acts as a filter based on the =startDate= or =startEventDate= properties. For leagues, regions and sports it will return only items which are referred by events with start date after the one specified here. This option has two possible value types: =now()= (which is default) and combined date and time as defined by [[https://en.wikipedia.org/wiki/ISO_8601][ISO 8601]]. The time is always assumed to be in UTC. We also ignore any time granularity below hours (i.e. if you specify a time like 15:35, we will assume it to equal 15:00. Example: =Leagues?$filter=sportId eq "1"&$from=2017-09-23T02:00:00Z&$timeRange=TwoDays=(Will return all leagues from sport with ID "1" (Soccer) which have events starting during the weekend of Sep 23-24, 2017, assuming we want to display them to a client using CEST.)|
| =$fastPreload= |This is a custom option, not part of the standard OData protocol. It allows requesting a staged delivery of the response, by initially returning the specified number of items to allow quick display of partial data and then providing the full payload of the response on a subsequent update. Example: =Events?$filter=(isLive eq true) and sportId eq '1'&$fastPreload=5= (Will return the top 5 events which are live and belong to the sport with ID "1" (Soccer) and subsequently will return the full list.)|
| =&= |Allows combining the options in a query (e.g. $skip=...&$top=...)|

The following query options from the OData Protocol are NOT supported: *$expand, $count, $select*.